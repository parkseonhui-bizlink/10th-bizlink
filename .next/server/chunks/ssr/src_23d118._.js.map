{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/styles/fromTheCeo/fromTheCeo.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"videoarea\": \"fromTheCeo-module__H9kgyW__videoarea\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA"}},
    {"offset": {"line": 9, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/ps/Desktop/work/corporate10/src/app/components/fromtheceo/FromTheCeo.tsx"],"sourcesContent":["'use client'\nimport React from 'react'\nimport Image from 'next/image'\nimport styles from '@/styles/fromTheCeo/fromTheCeo.module.css'\n\nconst FromTheCeo = () => {\n  return (\n    <section className=\"sec grdeBlue formtheceo\">\n      <section className=\"secInner\">\n        <figure className=\"titleImg\">\n          <Image\n            src=\"/images/section/FROMTHECEO.svg\"\n            width={693}\n            height={158}\n            alt=\"FROM THE CEO\"\n          />\n        </figure>\n        <div className=\"titleArea\">\n          <h2 className=\"secTitle\">ご挨拶</h2>\n          <h3>代表取締役兼CEO</h3>\n          <p>姜 大成(かん てそん)</p>\n        </div>\n        <article className={styles.videoarea}>\n          {/* TODO: YOUTUBE */}\n          <Image src=\"/images/dummy.png\" width={982} height={541} alt=\"dummy\" />\n        </article>\n      </section>\n    </section>\n  )\n}\n\nexport default FromTheCeo\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKA,MAAM,aAAa;IACjB,qBACE,8OAAC;QAAQ,WAAU;kBACjB,cAAA,8OAAC;YAAQ,WAAU;;8BACjB,8OAAC;oBAAO,WAAU;8BAChB,cAAA,8OAAC,6HAAA,CAAA,UAAK;wBACJ,KAAI;wBACJ,OAAO;wBACP,QAAQ;wBACR,KAAI;;;;;;;;;;;8BAGR,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAAW;;;;;;sCACzB,8OAAC;sCAAG;;;;;;sCACJ,8OAAC;sCAAE;;;;;;;;;;;;8BAEL,8OAAC;oBAAQ,WAAW,wJAAA,CAAA,UAAM,CAAC,SAAS;8BAElC,cAAA,8OAAC,6HAAA,CAAA,UAAK;wBAAC,KAAI;wBAAoB,OAAO;wBAAK,QAAQ;wBAAK,KAAI;;;;;;;;;;;;;;;;;;;;;;AAKtE;uCAEe"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/ps/Desktop/work/corporate10/src/app/Top.tsx"],"sourcesContent":["'use client'\nimport React, { useEffect, useRef, useState } from 'react'\nimport FV from './components/fv/FV'\nimport History from './components/history/History'\nimport Progress from './components/progress/Progress'\nimport Numbers from './components/numbers/Numbers'\nimport FromTheCeo from './components/fromtheceo/FromTheCeo'\nimport Message from './components/message/Message'\n\nimport gsap from 'gsap'\nimport { ScrollTrigger } from 'gsap/ScrollTrigger'\n\ngsap.registerPlugin(ScrollTrigger)\n\nconst Top = () => {\n  const historyRef = useRef<HTMLDivElement | null>(null)\n  const historySPRef = useRef<HTMLDivElement | null>(null)\n  const progressRef = useRef<HTMLDivElement | null>(null)\n  const numbersRef = useRef<HTMLDivElement | null>(null)\n\n  const [activeIndex, setActiveIndex] = useState(0)\n  const totalSteps = 8\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return\n\n    let ctx = gsap.context(() => {\n      const historyContainer = historyRef.current\n      if (historyContainer) {\n        let sections = Array.from(\n          historyContainer.querySelectorAll('.panel')\n        ) as HTMLElement[]\n\n        let totalWidth = sections.reduce(\n          (acc, section) => acc + section.getBoundingClientRect().width,\n          0\n        )\n        historyContainer.style.width = `${totalWidth}px`\n\n        gsap.to(historyContainer, {\n          x: () => -(totalWidth - window.innerWidth),\n          ease: 'none',\n          scrollTrigger: {\n            trigger: historyContainer,\n            pin: true,\n            scrub: 1.5,\n            snap: {\n              snapTo: (progress) => {\n                let sectionOffsets = sections.map(\n                  (s) => s.offsetLeft / totalWidth\n                )\n                return gsap.utils.snap(sectionOffsets, progress)\n              },\n              duration: 0.8,\n            },\n            end: `+=${totalWidth - window.innerWidth}`,\n          },\n        })\n        if (window.innerWidth < 768 && historySPRef.current) {\n          const spBoxes = historySPRef.current.querySelectorAll(\n            '.historyboxSP'\n          ) as NodeListOf<HTMLElement>\n\n          spBoxes.forEach((box) => {\n            gsap.fromTo(\n              box,\n              { opacity: 0, y: 60 },\n              {\n                opacity: 1,\n                y: 0,\n                duration: 0.8,\n                ease: 'power2.out',\n                scrollTrigger: {\n                  trigger: box,\n                  start: 'top 85%',\n                  toggleActions: 'play none none none',\n                },\n              }\n            )\n          })\n        }\n      }\n\n      const progressContainer = progressRef.current\n      if (progressContainer) {\n        if (window.innerWidth >= 640) {\n          let lastIndex = -1\n          gsap.to(\n            {},\n            {\n              scrollTrigger: {\n                trigger: progressContainer,\n                start: 'top top',\n                end: `+=${totalSteps * window.innerHeight}px`,\n                scrub: 3,\n                pin: true,\n                snap: {\n                  snapTo: (progress) =>\n                    gsap.utils.snap(1 / (totalSteps - 1), progress),\n                  duration: 1.2,\n                },\n                onUpdate: (self) => {\n                  const newIndex = Math.round(self.progress * (totalSteps - 1))\n                  if (newIndex !== lastIndex) {\n                    setActiveIndex(newIndex)\n                    lastIndex = newIndex\n                  }\n                },\n              },\n            }\n          )\n        } else {\n          const spacer = document.createElement('div')\n          spacer.style.height = `${totalSteps * 80}vh`\n          progressContainer.appendChild(spacer)\n        }\n      }\n      if (numbersRef.current) {\n        const targets = numbersRef.current.querySelectorAll(\n          '.animated-number'\n        ) as NodeListOf<HTMLElement>\n\n        const bars = numbersRef.current.querySelectorAll(\n          '.barWrapper .bar'\n        ) as NodeListOf<HTMLElement>\n\n        targets.forEach((el) => {\n          const value = parseFloat(el.dataset.value!) || 0\n          const animationObj = { progress: 0 }\n\n          gsap.to(animationObj, {\n            progress: value,\n            duration: 2,\n            ease: 'power2.out',\n            scrollTrigger: {\n              trigger: numbersRef.current,\n              start: 'top 70%',\n              once: true,\n            },\n            onUpdate: function () {\n              el.textContent =\n                value % 1 === 0\n                  ? Math.round(animationObj.progress).toString()\n                  : animationObj.progress.toFixed(1)\n            },\n            onComplete: function () {\n              el.textContent = value.toString()\n            },\n          })\n        })\n\n        gsap.fromTo(\n          bars,\n          { height: '0%' },\n          {\n            height: (index, target) =>\n              `${parseFloat(target.getAttribute('data-height') || '0')}%`,\n            duration: 1.5,\n            ease: 'power2.out',\n            stagger: 0.2,\n            scrollTrigger: {\n              trigger: numbersRef.current,\n              start: 'top 70%',\n              once: true,\n            },\n          }\n        )\n      }\n\n      setTimeout(() => {\n        ScrollTrigger.refresh()\n      }, 500)\n    })\n\n    return () => ctx.revert()\n  }, [])\n\n  return (\n    <section>\n      {/* <FV />\n      <Message /> */}\n      {/* <History ref={historyRef} spRef={historySPRef} />\n      <Progress ref={progressRef} activeIndex={activeIndex} />\n      <Numbers ref={numbersRef} /> */}\n      <FromTheCeo />\n    </section>\n  )\n}\n\nexport default Top\n"],"names":[],"mappings":";;;;AACA;AAKA;AAGA;AACA;AAVA;;;;;;AAYA,6IAAA,CAAA,UAAI,CAAC,cAAc,CAAC,qIAAA,CAAA,gBAAa;AAEjC,MAAM,MAAM;IACV,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAyB;IACjD,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAyB;IACnD,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAyB;IAClD,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAyB;IAEjD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,aAAa;IAEnB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,wCAAmC;;QAEnC,IAAI;IAqJN,GAAG,EAAE;IAEL,qBACE,8OAAC;kBAMC,cAAA,8OAAC,qJAAA,CAAA,UAAU;;;;;;;;;;AAGjB;uCAEe"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}